// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../atma-utils

declare module 'selenium-query' {
    import { SQuery } from 'selenium-query/SQuery';
    export = SQuery;
}

declare module 'selenium-query/SQuery' {
    import { class_Dfr } from 'atma-utils';
    import { IBuildConfig } from 'selenium-query/static/build';
    import { IDriver, IElement } from 'selenium-query/IDriver';
    export interface IArray {
        length: number;
        [index: number]: any;
    }
    export class SQueryBase implements IArray {
        [index: number]: IElement;
        length: number;
        constructor(mix?: any);
        hasClass(name: string): PromiseLike<boolean>;
        addClass(name: string): any;
        removeClass(name: string): any;
        toggleClass(name: string): any;
        add(mix: any): any;
        eq(index: any): ThenableSQuery;
        slice(start?: number, end?: any): ThenableSQuery;
        each(fn: any): ThenableSQuery;
        map(fn: any): ThenableSQuery;
        toArray(): class_Dfr;
        text(): PromiseLike<string>;
        text(str: string): SQuery;
        html(): PromiseLike<string>;
        html(str: string): SQuery;
        append(html: string): any;
        prepend(html: string): any;
        before(html: string): any;
        after(html: string): any;
        css(cssObj: {
            [key: string]: any;
        }): ThenableSQuery;
        css(key: string, val: any): ThenableSQuery;
        css(key: string): Promise<any>;
        height(): Promise<number>;
        height(val: any): ThenableSQuery;
        innerHeight(): PromiseLike<number>;
        width(): Promise<number>;
        width(val: any): ThenableSQuery;
        innerWidth(): PromiseLike<number>;
        offset(): Promise<{
            top: number;
            left: number;
        }>;
        position(): Promise<{
            top: number;
            left: number;
        }>;
        scrollTop(...args: any[]): Promise<any>;
        scrollLeft(...args: any[]): Promise<any>;
        eval(mix: Function | string, ...args: any[]): Promise<any>;
        click(): any;
        trigger(type: any, ...args: any[]): any;
        select(...args: any[]): ThenableSQuery;
        focus(): any;
        blur(): any;
        sendKeys(mix: any): any;
        type(str: any): any;
        press(str: any): any;
        remove(): any;
        attr(name: string): Promise<any>;
        attr(vals: {
            [key: string]: any;
        }): ThenableSQuery;
        val(): PromiseLike<any>;
        val(val: any): ThenableSQuery;
        data(key: string): PromiseLike<any>;
        data(key: string, val: any): ThenableSQuery;
        prop(key: string): PromiseLike<any>;
        prop(key: string, val: any): ThenableSQuery;
        find(sel: string): ThenableSQuery;
        filter(sel: string): ThenableSQuery;
        parent(): ThenableSQuery;
        closest(sel: string): ThenableSQuery;
        children(sel: string): ThenableSQuery;
        next(sel: string): ThenableSQuery;
        static build(config: IBuildConfig): Promise<IDriver>;
        static load(url: string, config: IBuildConfig): ThenableSQuery;
        static setDriver(driver: IDriver): void;
        static getDriver(): IDriver;
    }
    export class SQuery extends SQueryBase {
    }
    const ThenableSQuery_base: new (...args: any[]) => SQueryBase & class_Dfr;
    export class ThenableSQuery extends ThenableSQuery_base {
        constructor(...args: any[]);
        resolve(...args: any[]): this;
        static toSync(x: ThenableSQuery): SQueryBase;
        static toAsync(x: SQuery): ThenableSQuery;
    }
    export {};
}

declare module 'selenium-query/static/build' {
    import { IDriver } from "selenium-query/IDriver";
    import { ThenableSQuery } from 'selenium-query/SQuery';
    export interface IBuildConfig {
        name: string;
        args?: string[];
        binaryPath?: string;
        applyOptions?(builder: any, options: any): any;
        setOptions?(builder: any, options: any): any;
        setArguments?(options: any): any;
        setBinaryPath?(options: any): any;
        setLogging?(options: any): any;
        [key: string]: any;
    }
    export const BuildStatics: {
        build(config: IBuildConfig): IDriver;
        load(url: string, config: IBuildConfig): ThenableSQuery;
    };
}

declare module 'selenium-query/IDriver' {
    export interface IDriver extends Promise<IDriver> {
        executeScript<T>(script: string, ...var_args: any[]): Promise<T>;
        get(url: string): IDriver;
    }
    export interface IElement {
        getDriver(): IDriver;
        sendKeys(str: string): any;
        click(): Promise<void>;
        getCssValue(name: string): Promise<any>;
        getSize(): Promise<{
            width: number;
            height: number;
        }>;
        getAttribute(name: string): Promise<any>;
        findElements({ css: string }: {
            css: any;
        }): any;
    }
}

